/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.0 heart.glb 
*/

import React from "react";
import { useGLTF } from "@react-three/drei";
import { useFrame } from "@react-three/fiber";
import { useGSAP } from "@gsap/react";
import gsap from "gsap";
import { ScrollTrigger, CustomEase } from "gsap/all";
import { Context } from "../../src/context";
gsap.registerPlugin(ScrollTrigger);
gsap.registerPlugin(useGSAP);
gsap.registerPlugin(CustomEase);
export function HeartModel(props) {
  const { nodes, materials } = useGLTF("/Models/heart.glb");
  const { speed } = React.useContext(Context);
  const ref = React.useRef();
  const changeRef = React.useRef();
  useGSAP(() => {
    gsap.fromTo(
      ref.current.scale,
      {
        x: 0,
        y: 0,
        z: 0,
      },
      {
        x: 0.4,
        y: 0.4,
        z: 0.4,
        duration: 0.0001,
        scrollTrigger: {
          trigger: ".food-is-love",
          start: "top bottom",
          end: "top top",
          toggleActions: "play none none reverse",
          onToggle: (self) => {
            setActive(self.isActive);
          },
          // ,
        },
      }
    );
    gsap.fromTo(
      ref.current.scale,
      {
        x: 0.4,
        y: 0.4,
        z: 0.4,
      },
      {
        x: 0,
        y: 0,
        z: 0,
        duration: 0.0001,
        scrollTrigger: {
          trigger: ".food-is-art",
          start: "top bottom",
          end: "top top",
          toggleActions: "play none none reverse",

          // ,
        },
        immediateRender: false,
      }
    );
    // const tl = gsap.timeline({
    //   scrollTrigger: {
    //     trigger: ".food-is-art",
    //     start: "top bottom",
    //     end: "top top",
    //     toggleActions: "play none none reverse",
    //     // ,
    //   },
    // });
    // gsap.to(ref.current, {
    //   scrollTrigger: {
    //     trigger: ".food-is-art",
    //     start: "top bottom",
    //     end: "top top",
    //     toggleActions: "play none none reverse",
    //     onEnter: () => {
    //       const tl = gsap.timeline();
    //       tl.fromTo(
    //         changeRef.current.rotation,
    //         {
    //           y: 0,
    //         },
    //         {
    //           y: 10 * Math.PI,
    //           duration: 1,
    //           ease: "expo.in",
    //         }
    //       ).fromTo(
    //         ref.current.scale,
    //         {
    //           x: 0.4,
    //           y: 0.4,
    //           z: 0.4,
    //         },
    //         {
    //           x: 0,
    //           y: 0,
    //           z: 0,
    //           duration: 0.0001,
    //           immediateRender: false,
    //         },
    //         "-=0.25"
    //       );
    //     },
    //     onLeaveBack: () => {
    //       console.log("back");
    //       const tl = gsap.timeline();
    //       tl.fromTo(
    //         changeRef.current.rotation,
    //         {
    //           y: 0,
    //         },
    //         {
    //           delay: 0.75,
    //           y: 8 * Math.PI,
    //           duration: 1,
    //           ease: "expo.out",
    //         }
    //       ).fromTo(
    //         ref.current.scale,
    //         {
    //           x: 0,
    //           y: 0,
    //           z: 0,
    //         },
    //         {
    //           x: 0.4,
    //           y: 0.4,
    //           z: 0.4,
    //           duration: 0.0001,
    //           immediateRender: false,
    //         },
    //         "-=1"
    //       );
    //     },
    //   },
    // });
  });
  useFrame(() => {
    ref.current.rotation.y += 0.01 * speed;
  });
  return (
    <group {...props} dispose={null} scale={0} ref={ref}>
      <group ref={changeRef}>
        <mesh
          geometry={nodes.polySurface1.geometry}
          material={materials.standardSurface2}
          position={[0, 0.016, 0]}
          rotation={[Math.PI / 2, 0, 0]}
        />
      </group>
    </group>
  );
}

useGLTF.preload("/heart.glb");
