/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.0 clock.glb 
*/

import React from "react";
import { useGLTF, useAnimations } from "@react-three/drei";
import { useGSAP } from "@gsap/react";
import gsap from "gsap";
import { useFrame } from "@react-three/fiber";

export function ClockModel(props) {
  const ref = React.useRef();
  const changeRef = React.useRef();
  const { nodes, materials, animations } = useGLTF("/Models/clock.glb");
  const { actions } = useAnimations(animations, ref);
  const [hour, setHour] = React.useState(0);
  const [minute, setMinute] = React.useState(0);
  const minuteHand = React.useRef();
  const hourHand = React.useRef();
  const [active, setActive] = React.useState(false);

  useGSAP(() => {
    gsap.to(ref.current, {
      scrollTrigger: {
        trigger: ".food-is-beyond-time",
        start: "top bottom",
        end: "top top",
        toggleActions: "play none none reverse",
        onToggle: (self) => {
          setActive(self.isActive);
        },
        onEnter: () => {
          const appeartl = gsap.timeline({});
          appeartl
            .fromTo(
              changeRef.current.rotation,
              {
                y: 0,
              },
              {
                delay: 0.75,
                y: 8 * Math.PI,
                duration: 1,
                ease: "expo.out",
              }
            )
            .fromTo(
              ref.current.scale,
              {
                x: 0,
                y: 0,
                z: 0,
              },
              {
                x: 12,
                y: 12,
                z: 12,
                duration: 0.0001,
              },
              "-=0.75"
            );
        },
        onLeaveBack: () => {
          const leaveTl = gsap.timeline({});
          leaveTl
            .fromTo(
              changeRef.current.rotation,
              {
                y: 0 * Math.PI,
              },
              {
                y: 10 * Math.PI,
                duration: 1,
                ease: "expo.in",
              }
            )
            .fromTo(
              ref.current.scale,
              {
                x: 12,
                y: 12,
                z: 12,
              },
              {
                x: 0,
                y: 0,
                z: 0,
                duration: 0.0001,
              },
              "-=0"
            );
        },
        onLeave: () => {
          const leaveTl = gsap.timeline({});
          leaveTl
            .fromTo(
              changeRef.current.rotation,
              {
                y: 0 * Math.PI,
              },
              {
                y: 10 * Math.PI,
                duration: 1,
                ease: "expo.in",
              }
            )
            .fromTo(
              ref.current.scale,
              {
                x: 12,
                y: 12,
                z: 12,
              },
              {
                x: 0,
                y: 0,
                z: 0,
                duration: 0.0001,
              },
              "-=0"
            );
        },
        onEnterBack: () => {
          const appeartl = gsap.timeline({});
          appeartl
            .fromTo(
              changeRef.current.rotation,
              {
                y: 0,
              },
              {
                delay: 0.75,
                y: 8 * Math.PI,
                duration: 1,
                ease: "expo.out",
              }
            )
            .fromTo(
              ref.current.scale,
              {
                x: 0,
                y: 0,
                z: 0,
              },
              {
                x: 12,
                y: 12,
                z: 12,
                duration: 0.0001,
              },
              "-=0.75"
            );
        },
        // markers: true,
      },
    });
    // gsap.fromTo(
    //   ref.current.scale,
    //   {
    //     x: 0,
    //     y: 0,
    //     z: 0,
    //   },
    //   {
    //     x: 12,
    //     y: 12,
    //     z: 12,
    //     duration: 0.0001,
    //     scrollTrigger: {
    //       trigger: ".food-is-beyond-time",
    //       start: "top bottom",
    //       end: "top top",
    //       toggleActions: "play none none reverse",
    //       onToggle: (self) => {
    //         setActive(self.isActive);
    //       },
    //       // markers: true,
    //     },
    //   }
    // );
    // gsap.fromTo(
    //   ref.current.scale,
    //   {
    //     x: 12,
    //     y: 12,
    //     z: 12,
    //   },
    //   {
    //     x: 0,
    //     y: 0,
    //     z: 0,
    //     duration: 0.0001,
    //     scrollTrigger: {
    //       trigger: ".food-is-beyond-time",
    //       start: "top top",
    //       end: "top -100%",
    //       toggleActions: "play none none reverse",
    //       // markers: true,
    //     },
    //     immediateRender: false,
    //   }
    // );
  });
  useFrame(() => {
    var d = new Date();
    setHour(d.getHours());
    setMinute(d.getMinutes());
    hourHand.current.rotation.y = ((hour % 12) + minute / 60) * (Math.PI / 6);
    minuteHand.current.rotation.y =
      (-Math.PI * 18) / 180 + minute * (Math.PI / 30);
    if (active) {
      ref.current.rotation.y += 0.01;
    } else {
      return;
    }
  });
  return (
    <group ref={ref} {...props} dispose={null} scale={0}>
      <group name="Scene" ref={changeRef}>
        <group name="Sketchfab_model" rotation={[-Math.PI / 2, 0, 0]}>
          <group name="Root">
            <group name="Obj_Clock">
              <group
                name="Obj_Hand"
                position={[0, -0.022, 0.029]}
                rotation={[0, 0.314, 0]}
              >
                <mesh
                  name="Obj_Hand_0"
                  geometry={nodes.Obj_Hand_0.geometry}
                  material={materials.WhiteAndBlack}
                  ref={minuteHand}
                />
              </group>
              <group
                name="Obj_Hand001"
                position={[0, -0.022, 0.029]}
                rotation={[0, 0.026, 0]}
              >
                <mesh
                  name="Obj_Hand001_0"
                  geometry={nodes.Obj_Hand001_0.geometry}
                  material={materials.WhiteAndBlack}
                  ref={hourHand}
                />
              </group>
              <mesh
                name="Obj_Clock_0"
                geometry={nodes.Obj_Clock_0.geometry}
                material={materials.WhiteAndBlack}
              />
            </group>
          </group>
        </group>
      </group>
    </group>
  );
}

useGLTF.preload("/clock.glb");
